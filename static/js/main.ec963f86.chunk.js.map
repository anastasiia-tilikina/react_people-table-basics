{"version":3,"sources":["pages/HomePage.tsx","api.ts","components/Loader/Loader.tsx","components/PersonLink/PersonLink.tsx","components/PeopleTable/PeopleTable.tsx","pages/PeoplePage.tsx","pages/NotFoundPage.tsx","components/NavLink/PageNavLink.tsx","components/NavLink/NavBar/NavBar.tsx","App.tsx","index.tsx"],"names":["HomePage","className","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","PersonLink","person","name","sex","slug","classNames","to","PeopleTable","people","selectedSlug","isPersonSelected","renderParent","parent","find","map","born","died","motherName","fatherName","PeoplePage","useState","setPeople","isLoading","setIsLoading","hasError","setHasError","useParams","loadPeople","peopleFromServer","useEffect","length","NotFoundPage","PageNavLink","content","isActive","NavBar","role","App","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.ec963f86.chunk.js","sourcesContent":["import { FC } from 'react';\n\nexport const HomePage: FC = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../../types';\n\ntype Props = {\n  person: Partial<Person>;\n};\n\nexport const PersonLink: FC<Props> = ({ person }) => {\n  const { name, sex, slug } = person;\n\n  return (\n    <Link\n      className={classNames({\n        'has-text-danger': sex === 'f',\n      })}\n      to={`/people/${slug}`}\n    >\n      {name}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport { FC } from 'react';\nimport { Person } from '../../types';\nimport { PersonLink } from '../PersonLink';\n\ntype Props = {\n  people: Person[];\n  selectedSlug: string;\n};\n\nexport const PeopleTable: FC<Props> = ({ people, selectedSlug }) => {\n  const isPersonSelected = (slug: string) => {\n    return slug === selectedSlug;\n  };\n\n  const renderParent = (name: string | null) => {\n    const parent = people.find(person => person.name === name);\n\n    if (!parent) {\n      return name || '-';\n    }\n\n    return (\n      <PersonLink person={parent} />\n    );\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(({\n          name,\n          sex,\n          born,\n          died,\n          motherName,\n          fatherName,\n          slug,\n        }) => (\n          <tr\n            key={name}\n            data-cy=\"person\"\n            className={classNames({\n              'has-background-warning': isPersonSelected(slug),\n            })}\n          >\n            <td>\n              <PersonLink person={{ name, sex, slug }} />\n            </td>\n\n            <td>{sex}</td>\n            <td>{born}</td>\n            <td>{died}</td>\n\n            <td>\n              {renderParent(motherName)}\n            </td>\n\n            <td>\n              {renderParent(fatherName)}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { FC, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getPeople } from '../api';\nimport { Loader } from '../components/Loader';\nimport { PeopleTable } from '../components/PeopleTable';\nimport { Person } from '../types';\n\nexport const PeoplePage: FC = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const { selectedSlug = '' } = useParams();\n\n  const loadPeople = async () => {\n    setIsLoading(true);\n\n    try {\n      const peopleFromServer = await getPeople();\n\n      setPeople(peopleFromServer);\n    } catch {\n      setHasError(true);\n    }\n  };\n\n  useEffect(() => {\n    loadPeople();\n  }, []);\n\n  useEffect(() => {\n    if (isLoading) {\n      setIsLoading(false);\n    }\n  }, [people, hasError]);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {isLoading && <Loader />}\n\n          {hasError && (\n            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n              Something went wrong\n            </p>\n          )}\n\n          {!people.length && !isLoading && !hasError && (\n            <p data-cy=\"noPeopleMessage\">\n              There are no people on the server\n            </p>\n          )}\n\n          {!!people.length && !isLoading && !hasError && (\n            <PeopleTable\n              people={people}\n              selectedSlug={selectedSlug}\n            />\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n","import { FC } from 'react';\n\nexport const NotFoundPage: FC = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import classNames from 'classnames';\nimport { FC } from 'react';\nimport { NavLink } from 'react-router-dom';\n\ntype Props = {\n  to: string;\n  content: string;\n};\n\nexport const PageNavLink: FC<Props> = ({ to, content }) => {\n  return (\n    <NavLink\n      className={({ isActive }) => classNames(\n        'navbar-item',\n        { 'has-background-grey-lighter': isActive },\n      )}\n      to={to}\n    >\n      {content}\n    </NavLink>\n  );\n};\n","import { FC } from 'react';\nimport { PageNavLink } from '../PageNavLink';\n\nexport const NavBar: FC = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <PageNavLink to=\"/\" content=\"Home\" />\n\n          <PageNavLink to=\"/people\" content=\"People\" />\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Navigate, Route, Routes } from 'react-router-dom';\nimport './App.scss';\nimport { HomePage } from './pages/HomePage';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { NotFoundPage } from './pages/NotFoundPage';\nimport { NavBar } from './components/NavLink/NavBar';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <NavBar />\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route path=\"/\" element={<HomePage />} />\n\n            <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n\n            <Route path=\"people\">\n              <Route index element={<PeoplePage />} />\n\n              <Route path=\":selectedSlug\" element={<PeoplePage />} />\n            </Route>\n\n            <Route path=\"*\" element={<NotFoundPage />} />\n          </Routes>\n        </div>\n      </main>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}